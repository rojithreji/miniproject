{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rojithreji/Documents/msil/miniproject/src/components/prelogin/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link, Route, Redirect, useHistory, BrowserRouter as Router } from 'react-router-dom';\nimport PopupLogin from '../common/PopupLogin';\nimport '../../assets/styles/LoginHome.css';\nimport Input from '../common/Input';\nimport * as constants from '../../utilities/Constants';\nimport { clearTextField } from '../../utilities/CommonMethods';\n\nfunction Login({\n  login\n}) {\n  _s();\n\n  const [success, setSuccess] = useState(false);\n  const [currentUserName, setCurrentUserName] = useState(\"\");\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n\n  const userNames = () => window.localStorage.getItem('Username') || \" \";\n\n  const [user, setUser] = useState(userNames);\n  const userName = 'admin';\n  const password = 'admin';\n  const [error, setError] = useState(false);\n  let history = useHistory();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const togglePopup = () => {\n    setIsOpen(!isOpen);\n    setError(false);\n  };\n\n  const submitHandler = () => {\n    console.log(\"Users\", currentUserName, currentPassword);\n\n    if (currentUserName === userName && currentPassword == password) {\n      console.log(\"Success\");\n      setUser(currentUserName);\n      setSuccess(true);\n      console.log(\"User\", user);\n      login(currentUserName.toUpperCase());\n    } else {\n      setError(true);\n      setCurrentUserName(\"\");\n      setCurrentPassword(\"\");\n    }\n  };\n\n  const logout = () => {\n    console.log(\"logout\");\n    setSuccess(false);\n  };\n\n  useEffect(() => {\n    window.sessionStorage.setItem('Username', user);\n  }, [user]);\n\n  const userNameHandler = datas => {\n    setCurrentUserName(datas);\n  };\n\n  const passwordHandler = datas => {\n    setCurrentPassword(datas);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loginHeading\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginForm\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        id: \"username\",\n        placeHolder: \"Username\",\n        value: currentUserName,\n        parentCallBack: datas => userNameHandler(datas)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"password\",\n        id: \"password\",\n        placeHolder: \"Password\",\n        value: currentPassword,\n        parentCallBack: datas => passwordHandler(datas)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"button\",\n      onClick: submitHandler,\n      value: \"Submit\",\n      children: constants.LOGIN_PAGE.LOGIN_FORM_SUBMIT_BUTTON\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), error ? /*#__PURE__*/_jsxDEV(PopupLogin, {\n      content: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          id: \"logout-message\",\n          children: [constants.LOGIN_PAGE.LOGIN_ERROR_MESSAGE, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logout-buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: togglePopup,\n            className: \"button-logout\",\n            id: \"red\",\n            children: constants.LOGIN_PAGE.LOGIN_ERROR_BUTTON\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true),\n      handleClose: togglePopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }, this) : null, success ? history.push(\"/add\") : history.push(\"/\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"g0dXb/KjXOFvLXrLNa7x7K9tVMQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/rojithreji/Documents/msil/miniproject/src/components/prelogin/Login.js"],"names":["React","useEffect","useState","useSelector","Link","Route","Redirect","useHistory","BrowserRouter","Router","PopupLogin","Input","constants","clearTextField","Login","login","success","setSuccess","currentUserName","setCurrentUserName","currentPassword","setCurrentPassword","userNames","window","localStorage","getItem","user","setUser","userName","password","error","setError","history","isOpen","setIsOpen","togglePopup","submitHandler","console","log","toUpperCase","logout","sessionStorage","setItem","userNameHandler","datas","passwordHandler","LOGIN_PAGE","LOGIN_FORM_SUBMIT_BUTTON","LOGIN_ERROR_MESSAGE","LOGIN_ERROR_BUTTON","push"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport {useSelector} from 'react-redux';\nimport {Link,Route,Redirect,useHistory,BrowserRouter as Router} from 'react-router-dom'\nimport PopupLogin from '../common/PopupLogin';\nimport '../../assets/styles/LoginHome.css'\nimport Input from '../common/Input';\nimport * as constants from '../../utilities/Constants'\nimport {clearTextField} from '../../utilities/CommonMethods'\n\nfunction Login({login}) {\n\n    const [success,setSuccess] = useState(false)\n    const [currentUserName,setCurrentUserName] = useState(\"\")\n    const [currentPassword, setCurrentPassword]=useState(\"\")\n    const userNames =()=> window.localStorage.getItem('Username') || \" \"\n    const [ user,setUser ] = useState(userNames)\n    const userName = 'admin'\n    const password = 'admin'\n    const [error, setError] = useState(false)   \n    let history = useHistory()\n\n    const [isOpen, setIsOpen] = useState(false);\n \n    const togglePopup = () => {\n      setIsOpen(!isOpen);\n      setError(false)\n\n    }\n\n\n    \n    const submitHandler = ()=>{\n\n        console.log(\"Users\",currentUserName, currentPassword)\n\n        if(currentUserName === userName && currentPassword == password){\n            console.log(\"Success\")\n            setUser(currentUserName)\n            setSuccess(true);\n            \n            console.log(\"User\",user)\n            login(currentUserName.toUpperCase())\n        }\n\n        else{\n            setError(true)\n            setCurrentUserName(\"\")\n            setCurrentPassword(\"\")\n           \n            \n        }    \n    }\n    const logout = ()=>{\n        console.log(\"logout\")\n        setSuccess(false)\n        \n      }\n\n      useEffect(()=>{\n          window.sessionStorage.setItem('Username',user)\n      },[user])\n      \n    const userNameHandler = (datas)=>{\n        setCurrentUserName(datas)\n        \n    }  \n    const passwordHandler = (datas)=>{\n        setCurrentPassword(datas)\n    } \n\n    return (\n        \n        <div className='login'>\n            <p className='loginHeading' >Login</p>\n                <div className='loginForm'>\n                    \n                    <Input type='text' id='username' placeHolder='Username' value={currentUserName} parentCallBack={(datas)=>userNameHandler(datas)} />\n                    \n                    <Input type='password' id='password' placeHolder='Password' value={currentPassword} parentCallBack={(datas)=>passwordHandler(datas)}/>\n            \n                </div>\n               \n    <button type='submit' className='button'onClick={submitHandler} value='Submit'>{constants.LOGIN_PAGE.LOGIN_FORM_SUBMIT_BUTTON}</button>\n                {(error)?(\n                    <PopupLogin\n                        content={<>\n                        <b id='logout-message'>{constants.LOGIN_PAGE.LOGIN_ERROR_MESSAGE} </b>\n                        <div className='logout-buttons'>\n                        <button onClick={togglePopup} className='button-logout' id='red'>{constants.LOGIN_PAGE.LOGIN_ERROR_BUTTON}</button>\n                        </div>\n                        \n                        </>}\n                        handleClose={togglePopup}\n                        />):null}\n       {(success)?(history.push(\"/add\")):(history.push(\"/\"))}\n        </div>\n    )\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}